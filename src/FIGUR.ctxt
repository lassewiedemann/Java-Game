#BlueJ class context
comment0.target=FIGUR
comment0.text=\r\n\ Klasse\ FIGUR\ repreasentiert\ eine\ Spielfigur,\ deren\ Grafik\ animiert\ ist.\ \r\n\ Die\ Animationen\ koennen\ durch\ ein\ animiertes\ GIF,\ durch\ Einzelbilder\ \r\n\ oder\ durch\ Spritesheets\ erzeugt\ werden.\ \r\n\ Jede\ Figur\ kann\ mehrere\ Zustaende\ annehmen\:\ Je\ einen\ fuer\ eine\ Animationsfolge.\ \r\n\ So\ kann\ man\ z.B.\ eine\ andere\ Animationsfolge\ fuer\ 'laufen'\ verwenden\ als\ fuer\ 'springen'\ ...\r\n\ \r\n\ @author\ \ \ \ \ \ mike_gans@yahoo.de\ \ and\ \ michael\ andonie\r\n\ \r\n\ @version\ \ \ \ \ 4.0\ (2019-08-06)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ @changelog\ \ \ 4.0\ Umstieg\ auf\ EA\ 4\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Nicht\ vergleichbar\ mit\ alter\ Klasse\ FIGUR\ (kein\ Figuren-Editor\ mehr).\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Vereint\ die\ alten\ Klassen\ FIGUR,\ BILD\ und\ WECHSELBILD.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Kann\ ein\ Bild,\ mehrere\ Bilder,\ Sprite-Sheets\ und\ animierte\ GIFs\ einlesen.\r\n
comment1.params=zustandName\ gifPfad
comment1.target=FIGUR(java.lang.String,\ java.lang.String)
comment1.text=\r\n\ Konstruktor\ der\ Klasse\ FIGUR\ <b>fuer\ ein\ animiertes\ GIF</b>.\ \ \r\n\ Es\ wird\ ein\ erster\ Zustand\ angelegt\ mit\ der\ Animation\ des\ GIF.\r\n\ \r\n\ @param\ \ \ zustandName\ \ \ \ \ Frei\ waehlbarer\ Name\ des\ Zustands.\ (Wird\ zum\ Umschalten\ verwendet)\r\n\ @param\ \ \ gifPfad\ \ \ \ \ \ \ \ \ Datei-Pfad\ zu\ einem\ animierten\ GIF.\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (Liegt\ dieses\ direkt\ im\ Projekt-Ordner,\ so\ reicht\ der\ Datei-Name)\r\n
comment10.params=x\ y
comment10.target=void\ setzeMittelpunkt(double,\ double)
comment10.text=\r\n\ Setzt\ den\ Mittelpunkt\ der\ Figur\ neu.\ \r\n\r\n\ @param\ \ \ x\ \ \ Die\ x-Koordinate\ des\ neuen\ Mittelpunkts\r\n\ @param\ \ \ y\ \ \ Die\ y-Koordinate\ des\ neuen\ Mittelpunkts\r\n
comment11.params=
comment11.target=double\ nenneMx()
comment11.text=\r\n\ Nennt\ die\ x-Koordinate\ des\ Mittelpunkts.\ \r\n\r\n\ @return\ \ \ x-Koordinate\ des\ Mittelpunkts\r\n
comment12.params=
comment12.target=double\ nenneMy()
comment12.text=\r\n\ Nennt\ die\ y-Koordinate\ des\ Mittelpunkts.\ \r\n\ \ \r\n\ @return\ \ \ y-Koordinate\ des\ Mittelpunkts\r\n
comment13.params=
comment13.target=ea.Vector\ nennePosition()
comment14.params=sichtbarNeu
comment14.target=void\ setzeSichtbar(boolean)
comment14.text=\r\n\ Setzt\ die\ Figur\ sichtbar\ oder\ unsichtbar.\ \r\n\r\n\ @param\ \ \ sichtbarNeu\ \ \ \ \ 'true'\ fuer\ sichtbar,\ 'false'\ fuer\ unsichtbar\r\n
comment15.params=
comment15.target=boolean\ nenneSichtbar()
comment15.text=\r\n\ Gibt\ an,\ ob\ die\ Figur\ gerade\ sichtbar\ ist.\r\n\r\n\ @return\ \ 'true'\ wenn\ sichtbar,\ 'false'\ wenn\ unsichtbar\r\n
comment16.params=deltaX\ deltaY
comment16.target=void\ verschiebenUm(double,\ double)
comment16.text=\r\n\ Verschiebt\ diese\ Figur\ um\ eine\ Verschiebung\ -\ angegeben\ durch\ ein\ "Delta\ X"\ und\ "Delta\ Y".\r\n\ \r\n\ @param\ \ \ deltaX\ \ Der\ X\ Anteil\ dieser\ Verschiebung.\ Positive\ Werte\ verschieben\ nach\ rechts,\ negative\ nach\ links.\r\n\ \r\n\ @param\ \ \ deltaY\ \ Der\ Y\ Anteil\ dieser\ Verschiebung.\ Positive\ Werte\ verschieben\ nach\ unten,\ negative\ nach\ oben.\r\n
comment17.params=X\ Y
comment17.target=void\ setzePosition(double,\ double)
comment17.text=\r\n\ Setzt\ diese\ Figur\ auf\ eine\ Position\ -\ angegeben\ durch\ ein\ "X"\ und\ "Y".\r\n\ \r\n\ @param\ \ \ X\ \ Der\ X\ Anteil\ dieser\ Verschiebung.\ Positive\ Werte\ setzen\ rechts,\ negative\ links.\r\n\ \r\n\ @param\ \ \ Y\ \ Der\ Y\ Anteil\ dieser\ Verschiebung.\ Positive\ Werte\ setzen\ nach\ unten,\ negative\ nach\ oben.\r\n
comment18.params=ea
comment18.target=boolean\ beruehrt(ea.edu.EduActor)
comment18.text=\r\n\ Testet,\ ob\ ein\ anderes\ Grafik-Objekt\ beruehrt\ wird.\r\n\r\n\ @param\ \ \ ea\ \ \ Ein\ anderes\ BILD,\ RECHTECK,\ KREIS,\ DREIECK,\ ...\r\n\ \r\n\ @return\ \ true,\ wenn\ sich\ die\ beiden\ Objekte\ ueberschneiden\r\n
comment19.params=x\ y
comment19.target=boolean\ beinhaltetPunkt(double,\ double)
comment19.text=\r\n\ Diese\ Methode\ prueft,\ ob\ ein\ bestimmter\ Punkt\ in\ dem\ Objekt\ enthalten\ ist.\ <br\ />\r\n\ z.B.\ interessant\ zum\ Auswerten\ von\ Maus-Klicks.\r\n\r\n\ @param\ \ \ x\ \ \ x-Koordinate\ des\ Punkts\ (in\ Bildschirm-Metern)\r\n\ @param\ \ \ y\ \ \ x-Koordinate\ des\ Punkts\ (in\ Bildschirm-Metern)\r\n\ \r\n\ @return\ \ \ \ \ \ true,\ wenn\ Punkt\ innerhalb\ der\ Grafik\r\n
comment2.params=zustandName\ spritesheetPfad\ x\ y
comment2.target=FIGUR(java.lang.String,\ java.lang.String,\ int,\ int)
comment2.text=\r\n\ Konstruktor\ der\ Klasse\ FIGUR\ fuer\ <b>SpriteSheets</b>\ oder\ ein\ <b>einfaches\ Bild</b>.\r\n\ Einfache\ Bilder\ koennen\ mit\ x\=1\ und\ y\=1\ geladen\ werden.\ \r\n\ Sprites\ muessen\ alle\ gleich\ gross\ sein\ \!\!\!\r\n\ Es\ wird\ ein\ erster\ Zustand\ angelegt\ mit\ der\ Animation\ des\ Spritesheets.\ \r\n\ \r\n\r\n\ @param\ \ \ zustandName\ \ \ \ \ \ \ \ \ Frei\ waehlbarer\ Name\ des\ Zustands.\ (Wird\ zum\ Umschalten\ verwendet)\r\n\ @param\ \ \ spritesheetPfad\ \ \ \ \ Datei-Pfad\ zu\ einem\ Spritesheet\ oder\ Bild.\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (Liegt\ dieses\ direkt\ im\ Projekt-Ordner,\ so\ reicht\ der\ Datei-Name)\r\n\ @param\ \ \ x\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Anzahl\ der\ Sprites\ in\ x-Richtung\ (bei\ einfachem\ Bild\ 1)\r\n\ @param\ \ \ y\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Anzahl\ der\ Sprites\ in\ y-Richtung\ (bei\ einfachem\ Bild\ 1)\r\n
comment20.params=ea
comment20.target=double\ berechneAbstandX(ea.edu.EduActor)
comment20.text=\r\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Rechtecks\ vom\ Mittelpunkt\ \r\n\ eines\ anderen\ Grfik-Objekts\ in\ x-Richtung\ entfernt\ ist.\r\n\ \r\n\ @param\ \ \ grafikObjekt\ \ \ \ Das\ andere\ Grafik-Objekt\r\n\ \r\n\ @return\ \ Abstand\ (in\ Pixeln)\ dieses\ Rechtecks\ vom\ anderen\ Grafik-Objekt\ in\ x-Richtung\ (>0,\ wenn\ dieses\ Rechteck\ rechts\ des\ anderen\ Grafik-Objekts\ liegt)\r\n
comment21.params=ea
comment21.target=double\ berechneAbstandY(ea.edu.EduActor)
comment21.text=\r\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Rechtecks\ vom\ Mittelpunkt\ \r\n\ eines\ anderen\ Grfik-Objekts\ in\ y-Richtung\ entfernt\ ist.\r\n\ \r\n\ @param\ \ \ grafikObjekt\ \ \ \ Das\ andere\ Grafik-Objekt\r\n\ \r\n\ @return\ \ Abstand\ (in\ Pixeln)\ dieses\ Rechtecks\ vom\ anderen\ Grafik-Objekt\ in\ y-Richtung\ (>0,\ wenn\ dieses\ Rechteck\ unterhalb\ des\ anderen\ Grafik-Objekts\ liegt)\r\n
comment22.params=winkelAenderung
comment22.target=void\ drehenUm(double)
comment22.text=\r\n\ Dreht\ die\ Grafik\ um\ einen\ Winkel\r\n\r\n\ @param\ \ \ winkelAenderung\ \ \ \ \ +\:\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\r\n
comment23.params=neuerDrehwinkel
comment23.target=void\ setzeDrehwinkel(double)
comment23.text=\r\n\ Setzt\ den\ Drehwinkel\ auf\ eine\ absoluten\ neuen\ Wert\r\n\r\n\ @param\ \ \ neuerDrehwinkel\ \ \ \ \ der\ neue\ Drehwinkel\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ +\:\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\r\n
comment24.params=
comment24.target=double\ nenneDrehwinkel()
comment24.text=\r\n\ Nennt\ den\ Winkel,\ um\ den\ die\ Grafik\ gedreht\ wurde\r\n\r\n\ @return\ \ \ \ \ \ der\ Winkel,\ um\ den\ die\ Grafik\ gedreht\ wurde\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ 0\:\ wenn\ nicht\ gedreht\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ +\:\ wenn\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ wenn\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\r\n
comment25.params=gespiegelt
comment25.target=void\ spiegelnHorizontal(boolean)
comment25.text=\r\n\ Spiegelt\ die\ Grafik\ an\ der\ senkrechten\ Achse\r\n\r\n\ @param\ \ \ gespiegelt\ \ 'true'\ spiegeln,\ 'false'\ nicht\ spiegeln\r\n
comment26.params=gespiegelt
comment26.target=void\ spiegelnVertikal(boolean)
comment26.text=\r\n\ Spiegelt\ die\ Grafik\ an\ der\ waagerechten\ Achse\r\n\r\n\ @param\ \ \ gespiegelt\ \ 'true'\ spiegeln,\ 'false'\ nicht\ spiegeln\r\n
comment27.params=zustandsName\ bildpfad
comment27.target=void\ fuegeZustandVonGifHinzu(java.lang.String,\ java.lang.String)
comment27.text=\r\n\ Fuegt\ einen\ neuen\ Zustand\ <b>mit\ GIF-Animation</b>\ ein.\ \r\n\ \r\n\ @param\ \ \ zustandsName\ \ \ \ Frei\ waehlbarer\ Name\ des\ Zustands.\ (Wird\ zum\ Umschalten\ verwendet)\r\n\ @param\ \ \ bildpfad\ \ \ \ \ \ \ \ Pfad\ zum\ animierten\ GIF\ fuer\ diesen\ Zustand.\r\n
comment28.params=zustandsName\ bildpfad\ anzahlX\ anzahlY
comment28.target=void\ fuegeZustandVonSpritesheetHinzu(java.lang.String,\ java.lang.String,\ int,\ int)
comment28.text=\r\n\ Fuegt\ einen\ neuen\ Zustand\ <b>mit\ Spritesheet-Animation</b>\ ein.\ \r\n\ Das\ Spritesheet\ muss\ <b>aus\ Kacheln\ gleicher\ Gr\u00F6\u00DFe</b>\ bestehen.\r\n\ "leere"\ Kacheln\ werden\ als\ leere\ Animationsframes\ mit\ einbezogen.\r\n\ \r\n\ @param\ \ \ zustandsName\ \ Frei\ waehlbarer\ Name\ des\ Zustands.\ (Wird\ zum\ Umschalten\ verwendet)\r\n\ @param\ \ \ bildpfad\ \ \ \ \ \ Pfad\ zum\ Spritesheet.\ (Liegt\ diese\ im\ Projekt-Ordner,\ so\ reicht\ der\ Datei-Name)\r\n\ @param\ \ \ anzahlX\ \ \ \ \ \ \ Anzahl\ der\ Spritesheet-Kacheln\ in\ die\ X-Richtung.\r\n\ @param\ \ \ anzahlY\ \ \ \ \ \ \ Anzahl\ der\ Spritesheet-Kacheln\ in\ die\ Y-Richtung.\r\n
comment29.params=zustandsName\ bildpfade
comment29.target=void\ fuegeZustandVonEinzelbildernHinzu(java.lang.String,\ java.lang.String[])
comment29.text=\r\n\ Fuegt\ einen\ neuen\ Zustand\ <b>durch\ einzelne\ Bilder</b>\ ein.\ \r\n\ Die\ Bilder\ werden\ automatisch\ der\ Reihe\ nach\ durchgewechselt.\r\n\ \r\n\ @param\ \ \ zustandsName\ \ \ \ Frei\ waehlbarer\ Name\ des\ Zustands.\ (Wird\ zum\ Umschalten\ verwendet)\r\n\ @param\ \ \ bildpfade\ \ \ \ \ \ \ Die\ Pfade\ der\ einzelnen\ Bilder\ in\ korrekter\ Reihenfolge.\r\n
comment3.params=bildName
comment3.target=FIGUR(java.lang.String)
comment3.text=\r\n\ einfachster\ FIGUR\ Konstruktor\r\n\r\n\ @param\ \ \ bildName\ \ \ \ Dateiname\ (mit\ Endung)\ des\ Bildes\ (gif,\ png,\ jpg)\r\n
comment30.params=zustandsName\ verzeichnis\ praefix
comment30.target=void\ fuegeZustandVonPraefixHinzu(java.lang.String,\ java.lang.String,\ java.lang.String)
comment30.text=\r\n\ Fuegt\ einen\ neuen\ Zustand\ <b>durch\ ausgewaehlte\ Bilder\ eines\ Ordners</b>\ ein.\ \r\n\ Die\ Bilder\ werden\ automatisch\ der\ Reihe\ nach\ durchgewechselt.\r\n\ \r\n\ @param\ \ \ zustandsName\ \ \ \ Frei\ waehlbarer\ Name\ des\ Zustands.\ (Wird\ zum\ Umschalten\ verwendet)\r\n\ @param\ \ \ verzeichnis\ \ \ \ \ Der\ Name\ des\ Ordners\ (innerhalb\ des\ BlueJ-Projekts)\ in\ dem\ die\ Bilder\ liegen\r\n\ @param\ \ \ praefix\ \ \ \ \ \ \ \ \ gemeinsamer\ Namensbestandteil\:\ z.B.\ "affe"\ fuer\ affe1.jpg,\ affe2.jpg,\ ...\r\n
comment31.params=zustandsName
comment31.target=void\ setzeZustand(java.lang.String)
comment31.text=\r\n\ Versetzt\ die\ Figur\ in\ einen\ anderen\ (bereits\ existierenden)\ Zustand.\ \r\n\ In\ jedem\ Fall\ wird\ dabei\ der\ Animationsloop\ zurueckgesetzt.\r\n\ \r\n\ @param\ \ \ zustandsName\ \ \ \ Der\ Name\ des\ zu\ setzenden\ Zustands.\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Unter\ diesem\ Namen\ muss\ ein\ Zustand\ in\ dieser\ Figur\ existieren.\r\n
comment32.params=zustandVon\ zustandNach
comment32.target=void\ setzeAutomatischenUebergang(java.lang.String,\ java.lang.String)
comment32.text=\r\n\ Setzt\ einen\ automatischen\ Uebergang\ von\ einem\ Zustand\ zu\ einem\ anderen.\ \r\n\ Wird\ der\ erste\ Zustand\ aufgerufen,\ so\ wird\ erst\ <b>EIN\ MAL</b>\ die\ Animation\ dieses\ ersten\ Zustands\ \r\n\ aufgerufen\ und\ automatisch\ <b>anschliessend\ wiederholt</b>\ die\ Animation\ des\ zweiten\ Zustands.\r\n\ \r\n\ @param\ \ \ zustandVon\ \ \ \ \ \ Der\ erste\ Zustand.\r\n\ @param\ \ \ zustandNach\ \ \ \ \ Der\ zweite\ Zustand,\ zu\ dem\ die\ Figur\ automatisch\ uebergehen\ soll,\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ nachdem\ die\ animation\ des\ ersten\ Zustands\ einmal\ bis\ zum\ Ende\ durchgelaufen\ ist.\r\n
comment4.params=zustandName\ verzeichnisPfad\ praefix
comment4.target=FIGUR(java.lang.String,\ java.lang.String,\ java.lang.String)
comment4.text=\r\n\ Konstruktor\ der\ Klasse\ FIGUR\ fuer\ ausgewaehlte\ Bilder\ eines\ Ordners\ (im\ BlueJ-Projekt).\ \r\n\ Laedt\ dazu\ alle\ Bilder\ in\ einem\ Verzeichnis\ ein,\ die\ zu\ einem\ bestimmten\ Praefix\ passen.\r\n\ Es\ wird\ ein\ erster\ Zustand\ angelegt\ mit\ der\ Animation\ der\ Bilder-Folge.\r\n\ \r\n\ @param\ zustandName\ \ \ \ \ \ \ Name\ f\u00FCr\ den\ ersten\ Zustand.\r\n\ @param\ verzeichnisPfad\ \ \ Pfad\ zum\ Verzeichnis,\ in\ dem\ alle\ einzuladenden\ Bilder\ liegen.\r\n\ @param\ praefix\ \ \ \ \ \ \ \ \ \ \ Das\ Praefix,\ das\ alle\ einzuladenden\ Bilder\ haben\ muessen\:\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ z.B.\ "affe"\ fuer\ affe1.jpg,\ affe2.jpg,\ ...\r\n
comment5.params=skalierungsFaktor
comment5.target=void\ skaliere(double)
comment5.text=\r\n\ Methode\ skalieren\ vergroessert\ /\ verkleinert\ die\ Figur.\ \r\n\r\n\ @param\ \ \ skalierungsFaktor\ \ \ 1\ \:\ normal\ ;\ 0<skalierungsfaktor<1\ \:\ kleiner\ ;\ >1\ \:\ groesser\r\n
comment6.params=ebenenNummer
comment6.target=void\ setzeEbene(int)
comment6.text=\r\n\ Legt\ die\ Ebene\ fest,\ in\ der\ das\ Objekt\ gezeichnet\ wird.\ \r\n\ Ebenen\ mit\ grossen\ Nummern\ ueberdecken\ Ebenen\ mit\ kleineren\ Nummern.\ \r\n\ Der\ Hintergrund\ ist\ -1.\ Jedes\ Objekt\ wird\ zunaechst\ in\ Ebene\ 0\ erzeugt.\ \ \r\n\ Innerhalb\ derselben\ Ebene\ ueberdecken\ spaeter\ erzeugte\ Objekte\ die\ frueher\ erzeugten.\r\n\r\n\ @param\ \ \ ebenenNummer\ \ \ \ -1\=Hintergrund\ ;\ 0\=Standard\ (ueberdeckt\ Hintergrund)\ ;\ 1\=weiter\ vorne\ (ueberdeckt\ Hintergrund\ und\ Ebene\ 0)\ ;\ ...\r\n
comment7.params=
comment7.target=int\ nenneEbenenposition()
comment7.text=\r\n\ Nennt\ die\ Nummer\ der\ Ebene,\ in\ der\ dieses\ Objekt\ derzeit\ gezeichnet\ wird.\ \r\n\ Durch\ veraendern\ der\ Ebenen-Nummer\ kann\ man\ Objekte\ vor\ /\ hinter\ andere\ stellen.\ \r\n\ Ebenen\ mit\ groesserer\ Nummer\ verdecken\ Ebenen\ mit\ kleinerer\ Nummer.\r\n\r\n\ @return\ \ Ebenen-Nummer\:\ -1\=Hintergrund\ ;\ 0\=Standard\ (ueberdeckt\ Hintergrund)\ ,\ 1\=weiter\ vorne\ (ueberdeckt\ Hintergrund\ und\ Ebene\ 0)\ ;\ ...\r\n
comment8.params=
comment8.target=java.lang.String\ nenneAktuellenZustand()
comment8.text=\r\n\ Nennt\ den\ aktuellen\ Zustand.\r\n\ \r\n\ @return\ \ \ \ \ \ Der\ Name\ des\ aktuellen\ Zustands.\r\n
comment9.params=zustandName\ frameDauerInSek
comment9.target=void\ setzeAnimationsGeschwindigkeitVon(java.lang.String,\ double)
comment9.text=\r\n\ Setzt\ die\ Animationsgeschwindigkeit\ eines\ zustands\ neu.\ \r\n\r\n\ @param\ \ \ zustandName\ \ \ \ \ Name\ des\ Zustands,\ dessen\ Animationsgeschwindigkeit\ man\ aendern\ moechte\r\n\ @param\ \ \ frameDauerInSek\ \ Dauer\ in\ Sekunden\ fuer\ ein\ Bild\r\n
numComments=33
