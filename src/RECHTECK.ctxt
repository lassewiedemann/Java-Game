#BlueJ class context
comment0.target=RECHTECK
comment0.text=\r\n\ Diese\ Klasse\ stellt\ ein\ einfaches\ Rechteck\ dar.\ \r\n
comment1.params=
comment1.target=RECHTECK()
comment1.text=\r\n\ Konstruktor\ der\ Klasse\ <code>RECHTECK</code>.\ Erstellt\ ein\ neues\ Standard-Rechteck.\r\n
comment10.params=x\ y
comment10.target=boolean\ beinhaltetPunkt(double,\ double)
comment10.text=\r\n\ Diese\ Methode\ prueft,\ ob\ ein\ bestimmter\ Punkt\ in\ dem\ Objekt\ enthalten\ ist.\ <br\ />\r\n\ z.B.\ interessant\ zum\ Auswerten\ von\ Maus-Klicks.\r\n\r\n\ @param\ \ \ x\ \ \ x-Koordinate\ des\ Punkts\ (in\ Bildschirm-Metern)\r\n\ @param\ \ \ y\ \ \ x-Koordinate\ des\ Punkts\ (in\ Bildschirm-Metern)\r\n\ \r\n\ @return\ \ \ \ \ \ true,\ wenn\ Punkt\ innerhalb\ der\ Grafik\r\n
comment11.params=
comment11.target=int\ nenneEbenenposition()
comment11.text=\r\n\ Nennt\ die\ Nummer\ der\ Ebene,\ in\ der\ dieses\ Objekt\ derzeit\ gezeichnet\ wird.\ \r\n\ Durch\ veraendern\ der\ Ebenen-Nummer\ kann\ man\ Objekte\ vor\ /\ hinter\ andere\ stellen.\ \r\n\ Ebenen\ mit\ groesserer\ Nummer\ verdecken\ Ebenen\ mit\ kleinerer\ Nummer.\ \r\n\ Innerhalb\ derselben\ Ebene\ ueberdecken\ spaeter\ erzeugte\ Objekte\ die\ frueher\ erzeugten.\r\n\r\n\ @return\ \ Ebenen-Nummer\:\ -1\=Hintergrund\ ;\ 0\=Standard\ (ueberdeckt\ Hintergrund)\ ,\ 1\=weiter\ vorne\ (ueberdeckt\ Hintergrund\ und\ Ebene\ 0)\ ;\ ...\r\n
comment12.params=
comment12.target=double\ nenneMx()
comment12.text=\r\n\ Diese\ Methode\ gibt\ die\ x-Koordinate\ des\ Mittelpunkts\ dieses\ Objekts\ (in\ Bildschirm-Metern)\ zurueck.\r\n\ \r\n\ @return\ \ Die\ aktuelle\ x-Koordinate\ des\ Mittelpunktes\ dieses\ Objekts\ (in\ Bildschirm-Metern)\r\n
comment13.params=
comment13.target=double\ nenneMy()
comment13.text=\r\n\ Diese\ Methode\ gibt\ die\ y-Koordinate\ des\ Mittelpunkts\ dieses\ Objekts\ (in\ Bildschirm-Metern)\ zurueck.\r\n\ \r\n\ @return\ \ Die\ aktuelle\ y-Koordinate\ des\ Mittelpunktes\ dieses\ Objekts\ (in\ Bildschirm-Metern)\r\n
comment14.params=
comment14.target=double\ nenneBreite()
comment14.text=\r\n\ Diese\ Methode\ gibt\ die\ Breite\ dieses\ Objekts\ (in\ Bildschirm-Metern)\ zurueck.\r\n\ \r\n\ @return\ \ Die\ aktuelle\ Breite\ dieses\ Objekts\ (in\ Bildschirm-Metern)\r\n
comment15.params=
comment15.target=double\ nenneHoehe()
comment15.text=\r\n\ Diese\ Methode\ gibt\ die\ Hoehe\ dieses\ Objekts\ (in\ Bildschirm-Metern)\ zurueck.\r\n\ \r\n\ @return\ \ Die\ aktuelle\ Hoehe\ dieses\ Objekts\ (in\ Bildschirm-Metern)\r\n
comment16.params=
comment16.target=java.lang.String\ nenneFarbe()
comment16.text=\r\n\ Diese\ Methode\ gibt\ die\ Farbe\ dieses\ Objekts\ zurueck.\r\n\ \r\n\ @return\ \ Die\ aktuelle\ Farbe\ dieses\ Objekts\r\n
comment17.params=
comment17.target=boolean\ istSichtbar()
comment17.text=\r\n\ Diese\ Methode\ gibt\ die\ Sichtbarkeit\ dieses\ Objekts\ zurueck.\ \r\n\ \r\n\ @return\ \ Die\ aktuelle\ Sichtbarkeit\ dieses\ Objekts\r\n
comment18.params=ea
comment18.target=double\ berechneAbstandX(ea.edu.EduActor)
comment18.text=\r\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Objekts\ vom\ Mittelpunkt\ \r\n\ eines\ anderen\ EduActors\ in\ x-Richtung\ (in\ Bildschirm-Metern)\ entfernt\ ist.\ \r\n\ \r\n\ @param\ \ \ ea\ \ \ \ Der\ andere\ EduActor\r\n\ \r\n\ @return\ \ Abstand\ (in\ Bildschirm-Metern)\ dieses\ Objekts\ vom\ anderen\ EduActor\ in\ x-Richtung\ (>0,\ wenn\ dieses\ Rechteck\ rechts\ des\ anderen\ EduActors\ liegt)\r\n
comment19.params=ea
comment19.target=double\ berechneAbstandY(ea.edu.EduActor)
comment19.text=\r\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Objekts\ vom\ Mittelpunkt\ \r\n\ eines\ anderen\ EduActors\ in\ y-Richtung\ (in\ Bildschirm-Metern)\ entfernt\ ist.\ \r\n\ \r\n\ @param\ \ \ ea\ \ \ \ Der\ andere\ EduActor\ (in\ Bildschirm-Metern)\r\n\ \r\n\ @return\ \ Abstand\ (in\ Pixeln)\ dieses\ Rechtecks\ vom\ anderen\ EduActor\ in\ y-Richtung\ (>0,\ wenn\ dieses\ Rechteck\ unterhalb\ des\ anderen\ EduActors\ liegt)\r\n
comment2.params=breite\ hoehe
comment2.target=RECHTECK(double,\ double)
comment2.text=\r\n\ Konstruktor\ der\ Klasse\ <code>RECHTECK</code>.\ Erstellt\ ein\ neues\ Rechteck\ mit\ gegebenen\ Massen.\r\n\r\n\ @param\ \ \ breite\ \ Breite\ des\ Rechtecks\ (in\ Bildschirm-Metern)\r\n\ \r\n\ @param\ \ \ hoehe\ \ \ Hoehe\ des\ Rechtecks\ (in\ Bildschirm-Metern)\r\n
comment20.params=winkelInGrad
comment20.target=void\ drehenUm(double)
comment20.text=\r\n\ Dreht\ die\ Grafik\ um\ einen\ Winkel\ (in\ Grad).\ \r\n\r\n\ @param\ \ \ winkelInGrad\ \ \ \ \ \ \ \ +\:\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\r\n
comment21.params=neuerDrehwinkelInGrad
comment21.target=void\ setzeDrehwinkel(double)
comment21.text=\r\n\ Setzt\ den\ Drehwinkel\ auf\ einen\ absoluten\ neuen\ Wert\ (in\ Grad).\ \r\n\r\n\ @param\ \ \ neuerDrehwinkelInGrad\ \ \ \ \ der\ neue\ Drehwinkel\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ +\:\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\r\n
comment22.params=
comment22.target=double\ nenneDrehwinkel()
comment22.text=\r\n\ Nennt\ den\ Winkel\ (in\ Grad),\ um\ den\ die\ Grafik\ (im\ Vergleich\ zu\ ihrer\ Erzeugung)\ gedreht\ wurde\r\n\r\n\ @return\ \ \ \ \ \ der\ Winkel\ in\ Grad,\ um\ den\ die\ Grafik\ gedreht\ wurde\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ 0\:\ wenn\ nicht\ gedreht\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ +\:\ wenn\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ wenn\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\r\n
comment3.params=ebenenNummer
comment3.target=void\ setzeEbene(int)
comment3.text=\r\n\ Legt\ die\ Ebene\ fest,\ in\ der\ das\ Objekt\ gezeichnet\ wird.\ \r\n\ Ebenen\ mit\ grossen\ Nummern\ ueberdecken\ Ebenen\ mit\ kleineren\ Nummern.\ \r\n\ Der\ Hintergrund\ ist\ -1.\ Jedes\ Objekt\ wird\ zunaechst\ in\ Ebene\ 0\ erzeugt.\ \r\n\ Innerhalb\ derselben\ Ebene\ ueberdecken\ spaeter\ erzeugte\ Objekte\ die\ frueher\ erzeugten.\r\n\r\n\ @param\ \ \ ebenenNummer\ \ \ \ -1\=Hintergrund\ ;\ 0\=Standard\ (ueberdeckt\ Hintergrund)\ ;\ 1\=weiter\ vorne\ (ueberdeckt\ Hintergrund\ und\ Ebene\ 0)\ ;\ ...\r\n
comment4.params=breite\ hoehe
comment4.target=void\ setzeGroesse(double,\ double)
comment4.text=\r\n\ Setzt\ die\ Hoehe\ und\ Breite\ dieses\ Rechtecks\ neu.\r\n\ \r\n\ @param\ \ \ breite\ \ Die\ neue\ Breite\ dieses\ Rechtecks\ (in\ Bildschirm-Metern)\r\n\ \r\n\ @param\ \ \ hoehe\ \ \ Die\ neue\ Hoehe\ dieses\ Rechtecks\ (in\ Bildschirm-Metern)\r\n
comment5.params=farbeNeu
comment5.target=void\ setzeFarbe(java.lang.String)
comment5.text=\r\n\ Setzt\ die\ Farbe\ dieses\ Rechtecks\ neu.\r\n\ \r\n\ @param\ \ \ farbeNeu\ \ \ \ Diese\ Farbe\ erhaelt\ das\ Rechteck\ (z.B.\ "Rot").\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Farbnamen\ koennen\ in\ der\ Readme.txt\ im\ BlueJ-Projekt\ nachgelesen\ werden.\r\n
comment6.params=x\ y
comment6.target=void\ setzeMittelpunkt(double,\ double)
comment6.text=\r\n\ Setzt\ den\ Mittelpunkt\ dieses\ Rechtecks\ neu.\r\n\ \r\n\ @param\ \ \ x\ \ \ Die\ X-Koordinate\ des\ neuen\ Mittelpunktes\ (in\ Bildschirm-Metern)\r\n\ \r\n\ @param\ \ \ y\ \ \ Die\ Y-Koordinate\ des\ neuen\ Mittelpunktes\ (in\ Bildschirm-Metern)\r\n
comment7.params=sichtbarNeu
comment7.target=void\ setzeSichtbar(boolean)
comment7.text=\r\n\ Setzt,\ ob\ dieses\ Rechteck\ sichtbar\ sein\ soll.\r\n\ \r\n\ @param\ \ \ sichtbarNeu\ Ist\ dieser\ Wert\ <code>true</code>,\ ist\ nach\ dem\ Aufruf\ dieser\ \r\n\ \ \ \ \ \ \ \ \ \ Methode\ dieses\ Rechteck\ sichtbar.\ Ist\ dieser\ Wert\ <code>false</code>,\ so\ ist\ \r\n\ \ \ \ \ \ \ \ \ \ nach\ dem\ Aufruf\ dieser\ Methode\ dieses\ Rechteck\ unsichtbar.\r\n
comment8.params=deltaX\ deltaY
comment8.target=void\ verschiebenUm(double,\ double)
comment8.text=\r\n\ Verschiebt\ dieses\ Rechteck\ um\ eine\ Verschiebung\ -\ angegeben\ durch\ ein\ "Delta\ X"\ und\ "Delta\ Y".\r\n\ \r\n\ @param\ \ \ deltaX\ \ \ \ \ \ Der\ X\ Anteil\ dieser\ Verschiebung\ (in\ Bildschirm-Metern).\ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Positive\ Werte\ verschieben\ nach\ rechts,\ negative\ nach\ links.\r\n\ \r\n\ @param\ \ \ deltaY\ \ \ \ \ \ Der\ Y\ Anteil\ dieser\ Verschiebung\ (in\ Bildschirm-Metern).\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Positive\ Werte\ verschieben\ nach\ oben,\ negative\ nach\ unten.\r\n
comment9.params=ea
comment9.target=boolean\ beruehrt(ea.edu.EduActor)
comment9.text=\r\n\ Testet,\ ob\ ein\ anderer\ EduActor\ beruehrt\ wird.\r\n\r\n\ @param\ \ \ ea\ \ \ Ein\ anderer\ EduActor,\ z.B.\ FIGUR,\ RECHTECK,\ KREIS,\ DREIECK,\ ...\r\n\ \r\n\ @return\ \ true,\ wenn\ sich\ die\ beiden\ Objekte\ ueberschneiden\r\n
numComments=23
